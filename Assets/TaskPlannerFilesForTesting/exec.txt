using UnityEngine;
using System.Collections;
using System.Collections.Generic;

struct Action
{
	public string name;
	public Vector2 position;
	public bool running;

	public Action(string name, Vector2 pos)
	{
		this.name = name;
		position = pos;
		running = false;
	}
}

public class Executive {

	//Store a queue of actions
	Queue actions;
	Action current;
	Dictionary<Vector2, Tile> world_state;
	TaskPlannerProcess task_planner;

	public void Initialise()
	{
		actions = new Queue();
		world_state = GameManager.WorldState;
		task_planner = new TaskPlannerProcess ();
		//TODO: replace with asking task planner to generate plan to build a barracks
		//move to stone
		//gather stone
		//move to forest
		//gather wood
		//educate carpenter
		//build barracks
		//train riflemen
		//move to opposing teacher
		//attack opposing teacher
	}

	public void GameTick()
	{
		if(actions.Count == 0)
		{
			//generate new plan
			task_planner.Start();
			if(task_planner.actionsFound > 0)
			{
				for(int i = 0; i < task_planner.actionsFound; i++)
				{
					actions.Enqueue(new Action(task_planner.GetListOfActions[i], new Vector2(0,0)));
				}
			}
			DebugActions();
		}
		else if(!current.running)
		{
			Action next = (Action)actions.Peek();
			//TODO: check with task planner that action is still valid
			//if not, generate steps to complete current task and add to new queue
			//then copy the actions queue into the new queue
			//if it is still valid, perform the action necessary

			//current = (Action)actions.Dequeue();
			//current.running = true;
			//PerformAction();

		}
		//else
		//{
			//increment actions tick count
		//}

	}

	private void PerformAction()
	{
		world_state = GameManager.WorldState;
		//TODO: This entire switch statement can be replaced by a couple of lines
		//if scriptable objects were used for the actions


		switch (current.name.ToLower()) {
		case "mine":
			//decrement resource from mine
			//increment player resource or cart
			break;
		case "build":
			//spawn building site
			break;
		case "make":
			//start making process
			//set blacksmith to busy
			break;
		case "train": //include educate too
			//start education process
			//set relevant people to busy
			//assign end result
			break;
		case "family":
			//set people to busy
			//assign timeframe
			//assign end result
			break;
		case "store":
			//decrement resource from source
			//increment storage
			break;
		case "smelt":
			//start smelting process
			//set labourer to busy
			break;
		case "saw":
			//start saw process
			//set labourer to busy
			break;
		case "quarry":
			//start quarry process
			//set labourer to busy
			break;
		case "cuttree":
			//start foresting process
			//set lumberjack to busy
			break;
		case "trade":
			//increment opposing player with goods
			//increment yourself with goods
			//decrement yourself of goods traded to opponent
			//decrement opponent of goods traded to yourself
			break;
		case "attack":
			//attack opponent
			break;
		case "move":
			//ask motion planner to start moving
			break;
		default:
			break;
		}
		current.running = false;
	}

	private void DebugActions()
	{
		foreach (Action a in actions) {
			Debug.Log (a.name);
		}
	}
}
